/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 hacker-room-new.glb -T 
Files: hacker-room-new.glb [34.62MB] > /Users/hsuwinlat/Desktop/jsm pj/threejscc-portfolio/publicmodels/hacker-room-new-transformed.glb [2.56MB] (93%)
*/

import { useGLTF, useTexture } from "@react-three/drei";
const BASE_URL = import.meta.env.BASE_URL;

const HackerRoom = (props) => {

  console.log(BASE_URL + "models/hacker-room.glb")

  const { nodes, materials } = useGLTF("models/hacker-room.glb");
  const monitorTxt = useTexture("textures/desk/monitor.png");
  const monitorWhiteTxt = useTexture("textures/desk/monitor-white.png");
  const screenTxt = useTexture("textures/desk/screen3.png");
  const metalBlackTxt = useTexture("textures/desk/metal-black.png");
  const metalWhiteTxt = useTexture("textures/desk/metal-white.png");
  const woodenTableTxt = useTexture("textures/desk/wooden-table.png");
  const plasterRedTxt = useTexture("textures/desk/plaster-red.png");
  const floorTxt = useTexture("textures/desk/marble-floor.png");
  const metalTxt = useTexture("textures/desk/metal2.png");
  const propsTxt = useTexture("textures/desk/cpu.png");
  const whiteTileTxt = useTexture("textures/desk/white-tile-shiny.png");
  const blackTileTxt = useTexture("textures/desk/black-tile-matte.png");
  const brickWallTxt = useTexture("textures/desk/brick-wall.png");
  const sampleTxt = useTexture("textures/desk/sample.jpg");

  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.screen_screens_0.geometry}
        material={materials.screens}
      >
        <meshMatcapMaterial map={screenTxt} />
      </mesh>
      <mesh
        geometry={nodes.screen_glass_glass_0.geometry}
        material={materials.glass}
      />
      <mesh
        geometry={nodes.table_table_mat_0_1.geometry}
        material={materials.table_mat}
      >
        <meshMatcapMaterial map={sampleTxt} />
      </mesh>
      <mesh
        geometry={nodes.table_table_mat_0_2.geometry}
        material={materials.computer_mat}
      >
        <meshMatcapMaterial map={monitorWhiteTxt} />
      </mesh>
      <mesh
        geometry={nodes.table_table_mat_0_3.geometry}
        material={materials.server_mat}
      >
        <meshMatcapMaterial map={metalWhiteTxt} />
      </mesh>
      <mesh
        geometry={nodes.table_table_mat_0_4.geometry}
        material={materials.vhsPlayer_mat}
      />
      <mesh
        geometry={nodes.table_table_mat_0_5.geometry}
        material={materials.stand_mat}
      >
        <meshMatcapMaterial map={metalWhiteTxt} />
      </mesh>
      <mesh
        geometry={nodes.table_table_mat_0_6.geometry}
        material={materials.mat_mat}
      >
        <meshMatcapMaterial map={metalBlackTxt} />
      </mesh>
      <mesh
        geometry={nodes.table_table_mat_0_7.geometry}
        material={materials.arm_mat}
      />
      <mesh
        geometry={nodes.table_table_mat_0_8.geometry}
        material={materials.tv_mat}
      >
        <meshMatcapMaterial map={monitorWhiteTxt} />
      </mesh>
      <mesh
        geometry={nodes.table_table_mat_0_9.geometry}
        material={materials.cables_mat}
      />
      <mesh
        geometry={nodes.table_table_mat_0_10.geometry}
        material={materials.props_mat}
      >
        <meshMatcapMaterial map={propsTxt} />
      </mesh>
      <mesh
        geometry={nodes.table_table_mat_0_11.geometry}
        material={materials.ground_mat}
      >
        {/* <meshMatcapMaterial map={brickWallTxt} /> */}
      </mesh>
      <mesh
        geometry={nodes.table_table_mat_0_12.geometry}
        material={materials.key_mat}
      >
        {/* <meshMatcapMaterial map={metalTxt} /> */}
      </mesh>
    </group>
  );
};

useGLTF.preload("models/hacker-room.glb");

export default HackerRoom;
