/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 developer.glb -T 
Files: developer.glb [981.62KB] > /Users/hsuwinlat/Desktop/jsm pj/threejscc-portfolio/public/models/developer-transformed.glb [395.08KB] (60%)
*/

import React, { useEffect, useRef } from "react";
import { useGraph } from "@react-three/fiber";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";

const Developer = ({ section = "hero", animationName = "idle", ...props }) => {
  const group = useRef();

  // const { scene } = useGLTF("/models/human/developer.glb");
  // const { scene } = useGLTF("/models/human/test/girl3.glb");
  const { scene } = useGLTF(
    section == "hero"
      ? "/models/human/test/hero-girl.glb"
      : section == "dev"
      ? "/models/human/test/dev-girl.glb"
      : "/models/human/test/school-girl.glb"
  );
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  const { animations: idleAnimation } = useFBX(
    // "/models/human/idle.fbx"
    "/models/human/test/idle_greeting.fbx"
  );
  const { animations: saluteAnimation } = useFBX(
    "/models/human/salute.fbx"
    // "/models/human/test/angry.fbx"
  );
  const { animations: clappingAnimation } = useFBX(
    "/models/human/clapping.fbx"
  );
  const { animations: victoryAnimation } = useFBX(
    "/models/human/victory.fbx"
  );
  const { animations: idleWithTabletAnimation } = useFBX(
    "/models/human/test/idlewithtablet.fbx"
  );
  const { animations: talkingAnimation } = useFBX(
    "/models/human/test/talking.fbx"
  );
  const { animations: slowTalkingAnimation } = useFBX(
    "/models/human/test/slowtalking.fbx"
  );
  const { animations: femaleVictoryAnimation } = useFBX(
    "/models/human/test/femalevictory.fbx"
  );
  const { animations: angryAnimation } = useFBX(
    "/models/human/test/angry.fbx"
  );
  const { animations: happyAnimation } = useFBX(
    "/models/human/test/happy.fbx"
  );

  idleAnimation[0].name = "idle";
  idleWithTabletAnimation[0].name = "idlewithtablet";
  talkingAnimation[0].name = "talking";
  slowTalkingAnimation[0].name = "slowtalking";
  femaleVictoryAnimation[0].name = "femalevictory";
  saluteAnimation[0].name = "salute";
  clappingAnimation[0].name = "clapping";
  victoryAnimation[0].name = "victory";
  angryAnimation[0].name = "angry";
  happyAnimation[0].name = "happy";

  const { actions } = useAnimations(
    [
      idleAnimation[0],
      idleWithTabletAnimation[0],
      talkingAnimation[0],
      slowTalkingAnimation[0],
      femaleVictoryAnimation[0],
      saluteAnimation[0],
      clappingAnimation[0],
      victoryAnimation[0],
      angryAnimation[0],
      happyAnimation[0],
    ],
    group
  );

  /*  useEffect(() => {
    actions[animationName].reset().fadeIn(0.5).play();
    return () => actions[animationName].fadeOut(0.5);
  }, [animationName]); */

  useEffect(() => {
    const action = actions?.[animationName];
    if (action) {
      action.reset().fadeIn(0.5).play();
      return () => {
        action.fadeOut(0.5);
      };
    }
  }, [animationName, actions]);

  return (
    <group ref={group} {...props} dispose={null} rotation={[0, 0, 0]}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Glasses.geometry}
        material={materials.Wolf3D_Glasses}
        skeleton={nodes.Wolf3D_Glasses.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
};

// useGLTF.preload("/models/human/developer.glb");
// useGLTF.preload("/models/human/test/girl3.glb");
// useGLTF.preload("/models/human/test/girl4.glb");
useGLTF.preload([
  "/models/human/test/girl4.glb",
  "/models/human/test/girl3.glb",
  "/models/human/test/school-girl.glb",
]);
// useGLTF.preload(section == "hero" ? "/models/human/test/girl3.glb" : section == "dev" ? "/models/human/test/girl4.glb" : "/models/human/test/school-girl.glb");

export default Developer;
